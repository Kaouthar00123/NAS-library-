#N'oublier pas convertir logique et structure en modèle PyTorch del début à cause de minimiser le temps, car sa sert à rien de faire structure de graphe puis convertir en modele mais plutot manipuler modele direcetement

#Idée de macro et hearchique (donner un modele qui reprenste le cas génerale extrait from définition de type d'espace, et user dans un premier temps, il teste et personlise ces espaces avec min des choix (car c'est vaste, et puisque au début ou il veut voir comment les choses et collect des informations voila chnagment de ça comment il impacte ), puis si il veut rajouter d'espaces déja existants ou restreint au plus les espaces de bases, il peut définie une nvl classe et restreints les fonctionne sur ce nv espace tout en voyer code de cas génerale  ):

  #- Macro: définie des étapes, les ops dans chaque etape et mode de concaténation (concat, op mathématique: add, rien: pas de combainaison, autres ... ) et dans les ops on va inclure les saut de cnx et none avec tous les précédents
      # Comment le réaliser, ces hyperparamtres: num step,shared-ops, hyper, ops dans chaque step (or, and), type concat (pas ici, cause séparina),
        # Sampling_random (fait des sous_modules car sont des manipulatin lié à espace peut etre on aur besion apres, pas seulement random sampling, meme pour le RL): - init graph (choix de graphe: neoud c quoi et edge c quoi, neoud c op et résult car we could not re used op result), choix random de step si pas specfier, parcourt des steps, dans chaque step, on va cree N neoud (selon specificté), on va les numérotés et lui attributs attribut step, si user à specifier des ops used avec hyperparamètres, sinon choix random parmie exite, apres choix des liens (type concat si rien oke, si y'a combine on combine dans un neoud la lsier au chainé c meix rajouter le or and, et type de op de combine, rajouter cnx avec qui précède pour fait skip cnx), pour chaque neoud i, on va la lié avec tous qui les précèdes, soit vraie, y'a lien (skip cnx), soit faut y'a pas lien (none),
        # Mutate (encode): je change op, ou hyperparamtres (add, del), rend la repsrentation sous forme faltnier pour facilité manipulation (génotype)
        # superNetwork et HyperNetwork et shared_weight: y'a pas pour le moment (mais si user specfier taille et tt et veulle tester voila si je fixe cette op ici, je veux voire la meileur dans les autres), car ici je cherche sur topoly et op (je vein d'expolrer mais j'ai specifier ce que je veux un pettrne de cellule et algo va me chercher juste quele paramtres)

  #- Hearchique: c'est comme c'est un modèle génerale, qui comporte N niveau et dans chaque niveau on définie sa topology (num de neouds et types op dans chaque niveau et idé, chaque neoud i peut avoir cnx avec celle qui le précde avec n'importe quelle operations (pas delimiation num input inter from cette ref: https://arxiv.org/pdf/1711.00436.pdf , et le plus important: c quoi hearchisation dans les autres espaces niveau est explicite en profondeur et sequetielle mais ici idée est de construire des motifs plus complexe en combinaisn sous forme de graphe des motifs de bas niveau (example detection des texture à partir des motifs de detction des bordure ceci construire par example unc cellule puis on exaploite sous forme de graphe cette celllle pour consruire un motif complex à partir des motif de detction des teture, et c plus interprétable et modulaire et resprentable)))
      # Comment le réaliser, paramètres: combien de niveau (défault 3), pour chaque niveau combien num de neoud(implique op)[fixe ou valeur] (et shared op), idée, si je suis dans niveau i je peux avoir des combaison de tous les motifs de niveau inf (meme op simple: niveau 0)
        # Sampling_random: choix de niveau et num noued dans chaque niveau, je construie à chaque fois des graphe et choix des ops de bas niveaux
        # Mutate (encode):  pareils un graphe des graphes (soit reprentation de haut niveau pour garder expresivité et sense de héarchisation des motifs ou un graphe de bas niveau le plus concret, et représenté le tous)
        # superNetwork et HyperNetwork et shared_weight: je specfier si possible ou pas si truc fixe, (c large pour un superNetwork)

#Aspect imporatnte: jouer sur les autres types RNN, transfomer et les autres taches (type operation avec ces paramètres, ajustment de modele au finale) qui sont manque dans NASLib, et qui neccessite réelment les cas de ces espaces
